-- database: /Users/lachlan/Documents/Handball-Website/matchmaking/resources/database.db

-- Use the â–· button in the top right corner to run the entire file.

SELECT  -- get all unfinished games
    serving.name, receiving.name, teamOneScore, teamTwoScore, games.id
    FROM games 
    INNER JOIN teams AS serving ON games.teamOne = serving.id
    INNER JOIN teams as receiving ON games.teamTwo = receiving.id
    WHERE tournamentId = 8 
    AND games.bestPlayer = NULL;

-- this will be a doozey, but we need to get the finals of a game if there are finals, but if there are not then
SELECT 
    serving.name, receiving.name, teamOneScore, teamTwoScore, games.id
    FROM games 
    INNER JOIN teams AS serving ON games.teamOne = serving.id
    INNER JOIN teams as receiving ON games.teamTwo = receiving.id
    WHERE tournamentId = 8 AND
    CASE 
        WHEN (SELECT count(*) FROM games WHERE tournamentId = 8 AND isFinal = 1) > 0 THEN
            isFinal = 1
        ELSE
            round = (SELECT max(round) FROM games WHERE tournamentId = 8) 
    END;


-- get umpire name from umpire id:
SELECT 
    umpire.name
    FROM games
    LEFT JOIN officials AS u ON games.official = u.id
        LEFT JOIN people AS umpire ON u.personId = umpire.id;
    

SELECT 
    serving.name, receiving.name, teamOneScore, teamTwoScore, games.id, round, umpire.name, scorer.name, court
    FROM games 
    INNER JOIN teams AS serving ON games.teamOne = serving.id
    INNER JOIN teams AS receiving ON games.teamTwo = receiving.id
    LEFT JOIN officials AS u ON games.official = u.id
        LEFT JOIN people AS umpire ON u.personId = umpire.id
    LEFT JOIN officials AS s ON games.scorer = s.id
        LEFT JOIN people AS scorer ON s.personId = scorer.id
    WHERE
        tournamentId = 7 AND
        isFinal = 0;

SELECT
    twoCourts, count(scorer)>0
    FROM tournaments
    INNER JOIN games ON games.tournamentId = tournaments.id
    WHERE tournaments.id = 3;

SELECT 
    name, searchableName, 
        case 
            when imageURL is null 
                then "/api/teams/image?name=blank" 
            else 
                imageURL
        end  
    FROM teams 
    INNER JOIN tournamentTeams ON teams.id = tournamentTeams.teamId 
    WHERE tournamentId = 8;

SELECT 
    t.name, sum(s.started), sum(s.teamOneScore - s.teamTwoScore)
    FROM 
        teams as t 
        INNER JOIN games as s ON s.servingTeam = t.id OR s.teamTwo = t.id
    WHERE 
        s.tournamentId = 7 --OR 
        --r.tournamentId = 7
    GROUP BY(t.name);

SELECT 
    teams.name, count(s.id)+count(r.id) as games
    FROM teams
    INNER JOIN games as s on s.servingTeam = teams.id
    INNER JOIN games as r on r.receivingTeam = teams.id
    WHERE 
        s.tournamentId = 7 AND
        (
            s.servingTeam = teams.id OR
            s.receivingTeam = teams.id
        )
    GROUP BY teams.name;

SELECT 
    teams.name, 
    COUNT(games.id) as played,
    SUM(
        CASE 
            WHEN games.teamOne = teams.id
            THEN games.teamOneScore > games.teamTwoScore
            ELSE games.teamTwoScore > games.teamOneScore
        END
    ) as wins,
    SUM(
        CASE 
            WHEN games.teamOne = teams.id
            THEN games.teamOneScore > games.teamTwoScore
            ELSE games.teamTwoScore > games.teamOneScore
        END
    ) / CAST(COUNT(games.id) as REAL) as percentage,
    SUM(
        CASE 
            WHEN games.teamOne = teams.id
            THEN games.teamOneScore
            ELSE games.teamTwoScore
        END
    ) AS total_points,
    SUM(
        CASE 
            WHEN games.teamOne = teams.id
            THEN games.teamOneScore < games.teamTwoScore
            ELSE games.teamTwoScore < games.teamOneScore
        END
    ) as losses,
    SUM(
        p.faults
    ) as losses
FROM teams
INNER JOIN games ON games.teamOne = teams.id OR games.teamTwo = teams.id
INNER JOIN playerGameStats as p ON p.gameId = games.id
WHERE 
    games.tournamentId = 7 AND
    games.isFinal = 0 AND
    games.isBye = 0
GROUP BY teams.name;

-- get wins and losses of teams based on tournament


-- get amount of games played for each team
-- laziest fucking query of my life
SELECT Team, sum(games), (sum(wins)*100)/(sum(games))
FROM (
    SELECT teamOne as Team, count(teamOne) as games, 0 as wins
        FROM games
        WHERE 
            tournamentId = 3
            AND ended = 1 -- basically to ignore BYE game
            AND isFinal = 0
            AND teamOne != 1
        GROUP BY teamOne
    UNION ALL
    SELECT teamTwo as Team, count(teamTwo) as games, 0 as wins
        FROM games
        WHERE 
            tournamentId = 3
            AND ended = 1
            AND isFinal = 0
            AND teamTwo != 1
        GROUP BY teamTwo
    UNION ALL
    SELECT winningTeam as Team, 0 as games, count(winningTeam) as wins
        FROM games
        WHERE 
            tournamentId = 3 
            AND ended = 1
            AND isFinal = 0
            and isRanked = 1
        GROUP BY winningTeam
) AS subquery
GROUP BY Team
ORDER BY Team;

SELECT (tournamentTeams.teamId)+0 as Team -- fucked as fuck
FROM tournamentTeams
LEFT JOIN playerGameStats ON playerGameStats.teamId = tournamentTeams.teamId
WHERE  tournamentTeams.tournamentId = 3
GROUP BY tournamentTeams.teamId
ORDER BY tournamentTeams.teamId;

    SELECT winningTeam as Team, 0 as games, count(winningTeam) as wins
        FROM games
        WHERE 
            tournamentId = 3 
            AND ended = 1
            AND isFinal = 0
            and isRanked = 1
        GROUP BY winningTeam;

-- get elo for all players

SELECT playerId, SUM(eloChange)+1500 as elo
    FROM eloChange
    GROUP BY playerId;



SELECT 
    tournamentTeams.teamId, 
    (e1.elo + IFNULL(e2.elo, 0) + IFNULL(e3.elo, 0))/(1 + (e2.elo IS NOT NULL) + (e3.elo IS NOT NULL)) as elo
FROM 
    tournamentTeams
    LEFT JOIN teams ON teams.id = tournamentTeams.teamId
    LEFT JOIN (SELECT playerId, SUM(eloChange)+1500 as elo FROM eloChange GROUP BY playerId) AS e1 ON e1.playerId = teams.captain
    LEFT JOIN (SELECT playerId, SUM(eloChange)+1500 as elo FROM eloChange GROUP BY playerId) AS e2 ON e2.playerId = teams.nonCaptain
    LEFT JOIN (SELECT playerId, SUM(eloChange)+1500 as elo FROM eloChange GROUP BY playerId) AS e3 ON e3.playerId = teams.substitute
WHERE 
    tournamentTeams.tournamentId = 3
GROUP BY 
    tournamentTeams.teamId
ORDER BY 
    elo DESC;


SELECT Team, sum(games), (sum(wins)*100)/(sum(games)) as resultWinPercentage, sum(elo) as resultElo
FROM (
    SELECT teamOne as Team, count(teamOne) as games, 0 as wins,0 AS elo
        FROM games
        WHERE 
            tournamentId = 3
            AND ended = 1 -- basically to ignore BYE game
            AND isFinal = 0
            AND teamOne != 1
        GROUP BY teamOne
    UNION ALL
    SELECT teamTwo as Team, count(teamTwo) as games, 0 as wins,0 AS elo
        FROM games
        WHERE 
            tournamentId = 3
            AND ended = 1
            AND isFinal = 0
            AND teamTwo != 1
        GROUP BY teamTwo
    UNION ALL
    SELECT 
        tournamentTeams.teamId, 0, 0,
        (e1.elo + IFNULL(e2.elo, 0) + IFNULL(e3.elo, 0))/(1 + (e2.elo IS NOT NULL) + (e3.elo IS NOT NULL)) as elo
        FROM 
            tournamentTeams
            LEFT JOIN teams ON teams.id = tournamentTeams.teamId
            LEFT JOIN (SELECT playerId, SUM(eloChange)+1500 as elo FROM eloChange GROUP BY playerId) AS e1 ON e1.playerId = teams.captain
            LEFT JOIN (SELECT playerId, SUM(eloChange)+1500 as elo FROM eloChange GROUP BY playerId) AS e2 ON e2.playerId = teams.nonCaptain
            LEFT JOIN (SELECT playerId, SUM(eloChange)+1500 as elo FROM eloChange GROUP BY playerId) AS e3 ON e3.playerId = teams.substitute
        WHERE 
            tournamentTeams.tournamentId = 3
        GROUP BY 
            tournamentTeams.teamId
    UNION ALL
    SELECT winningTeam as Team, 0 as games, count(winningTeam) as wins, 0 AS elo
        FROM games
        WHERE 
            tournamentId = 3 
            AND ended = 1
            AND isFinal = 0
            and isRanked = 1
        GROUP BY winningTeam
)
GROUP BY Team
ORDER BY resultWinPercentage DESC, resultElo DESC;


--get all games for a tournament
SELECT 
    teamOne, teamTwo
    FROM games
    WHERE tournamentId = 3;

SELECT COUNT(*) FROM tournamentTeams WHERE tournamentId = 3;